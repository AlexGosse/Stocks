import os
import shutil
import time
import csv
import math
import yfinance as yf
from get_all_tickers import get_tickers as gt
import xlsxwriter


def main():
    # make_csv()  # Make the csv in /Daily_Stock_Report/Stocks
    calc_running_averages(days_in_average=20)  # Find the running averages and store them to excel files


# Create a file filled with CSV's with stock data
def make_csv():
    tickers = gt.get_tickers_filtered(mktcap_min=150000, mktcap_max=10000000)
    # Check that the amount of tickers isn't more than 1800
    print("The amount of stocks chosen to observe: " + str(len(tickers)))
    # Remove the Stocks folder and then recreate it in order to remove old stocks.
    shutil.rmtree("C:\\Users\\Alexander\\Desktop\\Daily_Stock_Report\\Stocks\\")
    os.mkdir("C:\\Users\\Alexander\\Desktop\\Daily_Stock_Report\\Stocks\\")
    # Holds the amount of API calls we executed
    Amount_of_API_Calls = 0
    Stock_Failure = 0  # Used to make sure we don't waste too many API calls on one Stock ticker
    Stocks_Not_Imported = 0
    # Used to iterate through our list of tickers
    i = 0
    while (i < len(tickers)) and (Amount_of_API_Calls < 1800):
        try:
            stock = tickers[i]  # Gets the current stock ticker
            temp = yf.Ticker(str(stock))
            Hist_data = temp.history(period="max")  # Tells yfinance what kind of data we want about this stock
            Hist_data.to_csv("C:\\Users\\Alexander\\Desktop\\Daily_Stock_Report\\Stocks\\" + stock + ".csv")
            time.sleep(1)  # Pauses the loop for one second for yfinance
            Amount_of_API_Calls += 1
            Stock_Failure = 0
            i += 1  # Iteration to the next ticker
        except ValueError:
            print("Yahoo Finance Backend Error, Attempting to Fix")  # An error occurred
            if Stock_Failure > 5:  # Move on to the next ticker if the current ticker fails more than 5 times
                i += 1
                Stocks_Not_Imported += 1
            Amount_of_API_Calls += 1
            Stock_Failure += 1
    print("The amount of stocks we successfully imported: " + str(i - Stocks_Not_Imported))


# Calculate the running average over a particular range of values
def calc_running_averages(days_in_average: int):
    all_running_averages = []
    # Loop through all files
    for filename in os.listdir("C:\\Users\\Alexander\\Desktop\\Daily_Stock_Report\\Stocks\\"):
        if filename.endswith(".csv"):  # Comma separated value table
            with open("C:\\Users\\Alexander\\Desktop\\Daily_Stock_Report\\Stocks\\" + filename,
                      'r') as csv_file:  # Open csv
                all_running_averages.append(filename[0:-4])

                run_avg_index = 0  # Index of the running average list
                run_avg_counter = 0  # Count to the number of
                line_count = 0  # Current line

                csv_reader = csv.reader(csv_file)  # Create reader

                row_count = sum(1 for row in csv_reader) - 1  # Number of rows that have data

                # List storing the running average for a stock
                running_average = [0] * math.floor(row_count / days_in_average)

                csv_file.seek(0)  # Return iterator to the start
                for row in csv_reader:  # Loop through every row
                    if line_count > (row_count % days_in_average) + 1:  # Not the initial lines
                        if row[4] != "":
                            running_average[run_avg_index] += float(row[4])  # Add closing value
                            run_avg_counter += 1
                            if run_avg_counter == days_in_average or row_count == line_count:
                                running_average[run_avg_index] /= days_in_average
                                #  Convert running average to a tuple that includes the last day in running average
                                running_average[run_avg_index] = (running_average[run_avg_index], row[0])

                                run_avg_index += 1
                                run_avg_counter = 0
                    line_count += 1
            all_running_averages.append(running_average)  # Add running average to list of running averages
    # Remove the Running_Averages folder and then recreate it in order to remove old stocks.
    shutil.rmtree("C:\\Users\\Alexander\\Desktop\\Daily_Stock_Report\\Running_Averages\\")
    os.mkdir("C:\\Users\\Alexander\\Desktop\\Daily_Stock_Report\\Running_Averages\\")

    # Create a workbook
    workbook = xlsxwriter.Workbook(
        "C:\\Users\\Alexander\\Desktop\\Daily_Stock_Report\\Running_Averages\\Running_Averages.xlsx")
    # Save the running averages as excel files
    for running_average in all_running_averages:
        if isinstance(running_average, str):  # If onto a new worksheet
            sheet_name = running_average
            worksheet = workbook.add_worksheet(name=sheet_name)
            worksheet.write(0, 0, "Average per " + str(days_in_average) + " days")
            worksheet.write(0, 1, "Date of last day")
            worksheet.set_column(0, 0, 20)
            worksheet.set_column(0, 1, 20)
        else:
            row = 1
            col = 0
            chart = workbook.add_chart({'type': 'line'})
            for average_tuple in running_average:
                worksheet.write(row, col, average_tuple[0])
                worksheet.write(row, col + 1, average_tuple[1])
                row += 1
            chart.add_series({
                'values': [sheet_name, 1, 0, row, 0]
            })
            worksheet.insert_chart('C2', chart)
    workbook.close()


# Run main
if __name__ == '__main__':
    main()
